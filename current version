#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define Max_Students 50

int Students_id [Max_Students];
float Student_grades_num [Max_Students];
char Student_grades_letter [Max_Students];
int num_Students = 0;

bool Duplication_check (int newids){
	for (int i=0; i< num_Students; i++) {
		if(Students_id[i] == newids) {
			return 1;
		}
	}
	return 0;
}

void add_students(){
    int id, num;
    float grade;
    printf("\nPlease enter number of students: ");
    scanf("%d", &num);

    while (num < 1 || num > Max_Students) {
        printf("The number of students must be between 1 and %d\n", Max_Students);
        scanf("%d", &num);
    }

    for (int i = 0; i < num ; i++) {
        printf("Enter ID for student %d: ", i+1);
        scanf("%d", &id);
        while (Duplication_check(id) == 1) {
            printf("The ID is already registered, enter a new ID: ");
            scanf("%d", &id);
        }
        Students_id[num_Students] = id;
        printf("Enter grade for student %d: ", i+1);
        scanf("%f", &grade);
        while (grade < 0.0 || grade > 100.0) {
            printf("Grades must be between 0 and 100. Enter again: ");
            scanf("%f", &grade);
        }
        Student_grades_num[num_Students] = grade;
        num_Students++;
    }
    start_menu();
}

void edit_student(){
    int current_id;
    float current_grade;
    scanf("%d",current_id);
    scanf("%f",current_grade);
    for (int i = 0; i <= num_Students ; i++) {
      if (current_id == Students_id[i]) {
        if (current_grade <=100.0 && current_grade>=0.0 ){
            Student_grades_num[i]= current_grade ;
            start_menu();
        }
        else{
            printf("wrong grade ");

        }
      }

    }
    printf ("id not found do you want to enter a new id?(Y\N)\n");
   char choice_id ;
        if (choice_id == 'Y' || choice_id == 'y'){
            edit_student();
        } else if(choice_id == 'N' || choice_id == 'n'){
            start_menu();
        }
    edit_student();
}

void display_student_records(){
    for(int i=0;i< num_Students ;i++){
        printf("\nstudent id : %d, student grade: %0.1f\n",Students_id[i] ,Student_grades_num[i]);
        if(Student_grades_num[i] >= 60){
                printf("Pass\n");
        }
        else {
            printf("Fail\n");
        }
        if (Student_grades_num[i] >= 90 && Student_grades_num[i] <= 100) {
            Student_grades_letter [i] = 'A';
            printf("%c\n", Student_grades_letter [i]);
        } else if (Student_grades_num[i] >= 80) {
            Student_grades_letter [i] = 'B';
            printf("%c\n", Student_grades_letter [i]);
        } else if (Student_grades_num[i] >= 70) {
            Student_grades_letter [i] = 'C';
            printf("%c\n", Student_grades_letter [i]);
        } else if (Student_grades_num[i] >= 60) {
            Student_grades_letter [i] = 'D';
            printf("%c\n", Student_grades_letter [i]);
        } else {
            Student_grades_letter [i] = 'F';
            printf("%c\n", Student_grades_letter [i]);
        }
    }
    start_menu();
}

void avg_grade(){
    float average = 0.0; //clearing average
    float sum = 0.0; //clearing sum
    char letter_grade;
    for (int i = 0; i < num_Students ; i++){
        sum += Student_grades_num[i];
    }
    average = sum / num_Students;
    if (average >= 90)letter_grade = 'A';
    else if (average >= 80) letter_grade = 'B';
    else if (average >= 70) letter_grade = 'C';
    else if (average >= 60) letter_grade = 'D';
    else letter_grade = 'F';

    printf("\nyour average is: %.2f\n", average);
    printf("the equivalent letter grade is: %c\n", letter_grade);
    start_menu();
}

void search_ID(){
    int id; // the entered id
    char choice; // used to check if the user wants to search for a new id
    bool found = 0; // helps in identifying later on if the id was found or not
    printf("\nEnter the student's ID:\n");
    scanf("%d", &id);

    for (int i = 0; i < Max_Students; i++){
        if (id == Students_id[i]){
            printf("\nFound !\n");
            found = 1; // found is switched from 0 to 1
            printf("Student ID: %d\n", Students_id[i]);
            printf("Student number grade: %0.1f\n", Student_grades_num[i]);
            printf("Student letter grade: %c\n", Student_grades_letter[i]);
            break;
        }
    }

    if (found == 0){
        printf("not found, want to search for a different ID? (Y/N)\n");
        scanf(" %c", &choice); // the space before %c makes scanf ignore white space & wait for Y/N

        if (choice == 'Y' || choice == 'y'){
            search_ID(); // recursive call so the function begins from the beginning
        } else if(choice == 'N' || choice == 'n'){
            start_menu(); // goes back to the main menu
        }
    }

    start_menu(); // goes back to the main menu
}

void grade_search(){
    float num = 0.0;
    int count = 0, grade_array[Max_Students]; // a new array to store the id's that fit the criteria set
    char option;

    printf("\nEnter a number:\n");
    scanf("%f", &num);
    printf("do you want student id above, below or equal that grade?\n'>' = above\n'<' = below\n'=' = equal\n");
    scanf(" %c", &option);

    if (option == '>' || option == '<' || option == '='){ // validation check
            if (option == '>'){
                for (int i = 0; i < num_Students; i++){
                    if (Student_grades_num[i] > num){ // if its above the entered num
                        grade_array[count] = Students_id [i]; // store into the new array
                        count++; // increment the counter
                    }
                }
                printf("Students with a grade higher than %0.1f:\n", num);
                if (count == 0){
                    printf("no one got a grade higher than %0.1f!\n", num);
                } else {
                    for (int i = 0; i < count; i++){
                        printf("%d\n", grade_array[i]); // prints the id of students
                    }
                }
            } else if(option == '<'){
                for (int i = 0; i < num_Students; i++){
                    if (Student_grades_num[i] < num){ // if its below the entered num
                        grade_array[count] = Students_id [i]; // store into the new array
                        count++; // increment
                    }
                }
                printf("Students with a grade lower than %0.1f:\n", num);
                if (count == 0){
                    printf("no one got a grade lower than %0.1f!\n", num);
                } else {
                    for (int i = 0; i < count; i++){
                        printf("%d\n", grade_array[i]); // print the id of students
                    }
                }
            } else if(option == '='){
                for (int i = 0; i < num_Students; i++){
                    if (Student_grades_num[i] == num){ // if the grade = num
                        grade_array[count] = Students_id [i]; // store in the array
                        count++; // increment
                    }
                }
                printf("Students with a grade equal to %0.1f:\n", num);
                if (count == 0){
                    printf("no one got a grade equal to %0.1f!\n", num);
                } else {
                    for (int i = 0; i < count; i++){
                        printf("%d\n", grade_array[i]); // print the ids
                    }
                }
            }
    } else {
        printf("invalid choice, re-enter your option:\n");
        grade_search(); // recursive call
    }

    start_menu(); // calls the main menu once the function task is done
}

void overall_report (){
    // initialising & declaration of variables used through the function
    float max = 0.0, min = 100.0, pass_percent = 0.0, fail_percent = 0.0;
    int count_A = 0, count_B = 0, count_C = 0, count_D = 0, count_F = 0;
    int count_pass = 0, count_fail = 0, honourlist = 0;
    int honourList_array[Max_Students];

    for (int i = 0; i < num_Students; i++){
        if (Student_grades_num [i] > max){ // traverse the array to find the new high
            max = Student_grades_num [i]; // save it in the max variable
        }

        if (Student_grades_num [i] < min){ // traverse the array to find the new high
            min = Student_grades_num [i]; // save it in the min variable
        }

        if (Student_grades_num[i] >= 90 && Student_grades_num[i] <= 100) {
            count_A++; // 90 - 100 increments the A counter
        } else if (Student_grades_num[i] >= 80) {
            count_B++; // 80 - 89 increments the B counter
        } else if (Student_grades_num[i] >= 70) {
            count_C++; // 70 - 79 increments the C counter
        } else if (Student_grades_num[i] >= 60) {
            count_D++; // 60 - 69 increments the D counter
        } else {
            count_F++; // < 60 increments the F counter
        }

        if(Student_grades_num[i] >= 60){
                count_pass++; // >= 60 increments the pass counter
        }
        else {
            count_fail++; // < 60 increments the fail counter
        }

        pass_percent = ((float) count_pass / num_Students) * 100; // calculates the pass percent
        fail_percent = ((float) count_fail/ num_Students) * 100; // calculates the fail percent

        if (Student_grades_num[i] >= 90){ // validates if the grade >= 90
            honourList_array[honourlist] = Students_id [i]; // store in the new array
            honourlist++; // increment the counter
        }
    }

    // output all outcomes
    printf("\nHighest Grade: %0.1f\n", max);
    printf("Lowest Grade: %0.1f\n", min);
    printf("Percent of pass: %0.1f\n", pass_percent);
    printf("Percent of fail: %0.1f\n", fail_percent);
    printf("Number of students that got an A (90 - 100): %d\n", count_A);
    printf("Number of students that got an B (>= 80): %d\n", count_B);
    printf("Number of students that got an C (>= 70): %d\n", count_C);
    printf("Number of students that got an D (>= 60): %d\n", count_D);
    printf("Number of students that got an F (0 - 59): %d\n\n", count_F);

    printf("Honour list (students with grades >= 90):\n");
    if (honourlist == 0){
        printf("no one got a grade higher than 90!");
    } else {
        for (int i = 0; i < honourlist; i++){
            printf("%d\n", honourList_array[i]); // prints out all id in the array
        }
    }

    start_menu(); // calls the start menu
}

void start_menu(){
    int option;
    printf("\nPick one of the options:\n");
    printf("1) Add new student info\n2) Edit a student's info\n3) Display all saved info\n");
    printf("4) Average grade of class\n5) Search student by ID\n6) Grade search\n7) overall report\n8) Exit\n\n");
    scanf("%d", &option);

    switch (option){
    case 1:
        add_students();
        break;
    case 2:
        edit_student();
        break;
    case 3:
        display_student_records();
        break;
    case 4:
        avg_grade();
        break;
    case 5:
        search_ID();
        break;
    case 6:
        grade_search();
        break;
    case 7:
        overall_report();
        break;
    case 8:
        exit(0);
    default:
        printf("invalid choice, re-enter your option:\n");
        start_menu();
    }
}

int main(){
    start_menu();
    return 0;
}
